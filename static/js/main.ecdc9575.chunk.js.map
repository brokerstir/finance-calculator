{"version":3,"sources":["Calc/Calc.js","App.js","registerServiceWorker.js","index.js"],"names":["calc","props","console","log","ans","err","hasErr","className","errMsg","finishCalc","ratePercent","intAmount","accumVal","type","checked","compound","onChange","clickCompound","name","value","principal","valChanged","onBlur","inputBlurred","interest","years","onClick","click","clear","App","state","showCalc","rateDecimal","valChangedHandler","event","val","target","setValHandler","invalid","v","setState","inputBlurHandler","isNaN","numberWithCommas","x","parts","toString","split","replace","join","toggleCompoundHandler","isCompound","runClearHandler","runCalcValidator","p","parseFloat","i","t","notNum","runCalcHandler","rd","rp","toFixed","s","av","this","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.ecdc9575.chunk.js","sourcesContent":["import React from 'react';\nimport './Calc.css'\n\nconst calc = (props) => {\n  console.log(\"props\", props);\n  let ans = null;\n  let err = null;\n  if (props.hasErr) {\n    err = (\n          <div>\n          <p className=\"error\">{props.errMsg}</p>\n          </div>\n          );\n  }\n  if (props.finishCalc) {\n    ans = (\n          <div className=\"ans\">\n          <p>The interest rate is {props.ratePercent}</p>\n          <p>The interest amount is <span className='money'>${props.intAmount}</span></p>\n          <p>The accumulated value is <span className='money'>${props.accumVal}</span></p>\n          </div>\n          );\n  };\n\n\n  return (\n\n    <div className=\"Calc\">\n\n      <main className=\"pa4 black-80\">\n        <div>\n          <fieldset className=\"ba b--transparent ph0 mh0\">\n            <legend className=\"f4 fw6 ph0 mh0\">Calculate Interest:</legend>\n              <input\n                type=\"checkbox\"\n                checked={props.compound}\n                onChange={props.clickCompound} /> <small>compound</small>\n              <div className=\"mt3\">\n                <label className=\"db fw6 lh-copy f6\">Principal $</label>\n                <input\n                  className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\n                  type=\"text\"\n                  name=\"principal\"\n                  value={props.principal}\n                  onChange={props.valChanged}\n                  onBlur={props.inputBlurred} />\n              </div>\n              <div className=\"mv3\">\n                <label className=\"db fw6 lh-copy f6\">Interest Rate %</label>\n                <input\n                  className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\n                  type=\"text\"\n                  name=\"interest\"\n                  value={props.interest}\n                  onChange={props.valChanged}\n                  onBlur={props.inputBlurred} />\n              </div>\n              <div className=\"mv3\">\n                <label className=\"db fw6 lh-copy f6\">Number of Years</label>\n                <input\n                  className=\"pa2 input-reset ba bg-transparent w-100\"\n                  type=\"text\"\n                  name=\"years\"\n                  value={props.years}\n                  onChange={props.valChanged}\n                  onBlur={props.inputBlurred} />\n              </div>\n              {err}\n              {ans}\n          </fieldset>\n            <div>\n              <a className=\"f6 link dim ba ph3 pv2 mb2 dib black\" onClick={props.click}>Calculate</a>\n              <a className=\"f6 link dim ba ph3 pv2 mb2 dib black\" onClick={props.clear}>Clear</a>\n            </div>\n        </div>\n      </main>\n\n    </div>\n  \t)\n}\n\nexport default calc;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Calc from './Calc/Calc';\nimport 'tachyons';\n\nclass App extends Component {\n\n  state = {\n    showCalc: true,\n    principal: '',\n    interest: '',\n    years: 1,\n    ratePercent: '',\n    rateDecimal: '',\n    intAmount: '',\n    accumVal: '',\n    finishCalc: false,\n    hasErr: false,\n    compound: false,\n    errMsg: ''\n  };\n\n  valChangedHandler = (event) => {\n    const val = event.target.value;\n    const name = event.target.name;\n    this.setValHandler(name, val, false);\n  };\n\n  setValHandler = (name, val, invalid) => {\n    let w = name == 'years' ? 1 : '';\n    let v = invalid ? w : val;\n    let err = invalid ? 'Error: Invalid Input' : '';\n    switch (name) {\n      case 'principal':\n        this.setState({principal: v, hasErr: invalid, errMsg: err});\n        break;\n      case 'interest':\n        this.setState({interest: v, hasErr: invalid, errMsg: err});\n        break;\n      case 'years':\n        this.setState({years: v, hasErr: invalid, errMsg: err});\n        break;\n      default:\n        break;\n    }\n  };\n\n  inputBlurHandler = (event) => {\n    let val = event.target.value;\n    const name = event.target.name;\n    const invalid = isNaN(val);\n    if (invalid) val = '';\n    this.setValHandler(name, val, invalid);\n  };\n\n  numberWithCommas = (x) => {\n    // x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    // 9999.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    const parts = x.toString().split(\".\");\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    return parts.join(\".\");\n  };\n\n  toggleCompoundHandler = () => {\n    const isCompound = this.state.compound;\n    this.setState({compound: !isCompound});\n  };\n\n  runClearHandler = () => {\n    this.setState({\n      principal:'',\n      interest: '',\n      years: 1,\n      ratePercent: '',\n      rateDecimal: '',\n      intAmount: '',\n      accumVal: '',\n      finishCalc: false,\n      hasErr: false,\n      compound: false,\n      errMsg: ''\n    });\n  };\n\n  runCalcValidator = () => {\n    const p = parseFloat(this.state.principal);\n    const i = parseFloat(this.state.interest);\n    const t = parseFloat(this.state.years);\n    const invalid = (p === '' || i === '' || t === '');\n    const notNum = ( isNaN(p) || isNaN(i) || isNaN(t) );\n    if (invalid || notNum) {\n      this.setState({\n        // principal: '',\n        years: 1,\n        // interest: '',\n        ratePercent: '',\n        rateDecimal: '',\n        intAmount: '',\n        accumVal: '',\n        finishCalc: false,\n        hasErr: true,\n        errMsg: 'Error: Blank Input'\n      });\n      return\n    }\n    this.runCalcHandler(p, i, t);\n  };\n\n  runCalcHandler = (p, i, t) => {\n    const allZero = ((i === 0) && (p === 0));\n    const rd = (i / 100);\n    const rp = (i).toFixed(2) + '%';\n    let s = null;\n    let av = null;\n    if (this.state.compound) {\n      av = p * ((rd + 1) ** t);\n      s = av - p;\n    } else {\n      s = p * rd * t;\n      av = s + p;\n    }\n    av = this.numberWithCommas(av.toFixed(2));\n    s = this.numberWithCommas(s.toFixed(2));\n    this.setState({\n      rateDecimal: rd.toFixed(4),\n      ratePercent: rp,\n      intAmount: s,\n      accumVal: av,\n      finishCalc: true,\n      hasErr: false,\n      errMsg: ''\n    });\n  }\n\n  render() {\n\n  \tconst style = {\n  \t\tbackgroundColor: 'white',\n  \t\tfont: 'inherit',\n  \t\tborder: '1px solid blue',\n  \t\tpadding: '8px',\n  \t\tcursor: 'pointer'\n  \t}\n\n    let calc = null;\n    if (this.state.showCalc) {\n      calc = (\n        <div>\n            <Calc\n              click={this.runCalcValidator}\n              clear={this.runClearHandler}\n              finishCalc={this.state.finishCalc}\n              hasErr={this.state.hasErr}\n              errMsg={this.state.errMsg}\n              compound={this.state.compound}\n              principal={this.state.principal}\n              interest={this.state.interest}\n              years={this.state.years}\n              ratePercent={this.state.ratePercent}\n              rateDecimal={this.state.rateDecimal}\n              intAmount={this.state.intAmount}\n              accumVal={this.state.accumVal}\n              clickCompound={(event) => this.toggleCompoundHandler(event)}\n              valChanged={(event) => this.valChangedHandler(event)}\n              inputBlurred={(event) => this.inputBlurHandler(event)} />\n        </div>\n        )\n    }\n\n    return (\n      <div>\n        <div className=\"App\">\n          <h1>Finance Calculator</h1>\n        </div>\n        {calc}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}